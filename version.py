"""
Setting version in the pyproject.toml
Check change log, and return the path.
"""
_COMMENT = """#
#  This file was autogenerated from a template  DO NOT EDIT!!
#  Changes should be made to the original file (pyproject_setting.toml)
#
"""

_CHANGELOG_TEMPLATE = """# Title
* line1
* line2
* line3
"""

INSERT_POINTS = [
    'github_release',
    'version',
]

class Insert:
    """Replace file content"""
    def __init__(self, file_text):
        self.text = file_text
    def insert_content(self, insert_point, content):
        """Insert the content to insert point"""
        full_point = f'{{{{insert_point.{insert_point}}}}}'
        self.text = self.text.replace(full_point, content)
    def get_file_text(self):
        """return file text"""
        return self.text


if __name__ == '__main__':
    import sys
    import toml
    from os.path import exists
    from os import mkdir

    # get tags from parse as version
    if len(sys.argv) < 2:
        sys.exit(1)
    ref = sys.argv[1]
    version = ref.removeprefix('refs/tags/')

    # generate pyproject.toml
    with open("pyproject_setting.toml", "r", encoding='utf-8') as f:
        parsed_toml = toml.loads(f.read())
    parsed_toml['project']['version'] = version
    with open("pyproject.toml", "w", encoding='utf-8') as f:
        toml.dump(parsed_toml, f)
    with open('pyproject.toml', 'r+', encoding='utf-8') as f:
        file_content = f.read()
        f.seek(0, 0)
        f.write(_COMMENT + '\n' + file_content)

    # check change log
    logdir = "./docs/changelogs"
    filepath = f"{logdir}/changelog_{version}.md"
    if not exists(logdir):
        mkdir(logdir)
    if not exists(filepath):
        with open(filepath, 'x', encoding='utf-8') as f:
            f.write(_CHANGELOG_TEMPLATE)
    print(filepath)

    # Create readme.md
    with open("docs/readme_repo.md", "r", encoding='utf-8') as f:
        file_obj = Insert(f.read())
    # point 0
    content_p0 = f"[Release {version}](https://github.com/ElenBOT/simulation-of-a-qubit-on-bloch-sphere/releases/tag/{version})"
    file_obj.insert_content(INSERT_POINTS[0], content_p0)
    # point 1
    content_p1 = f"{version}"
    file_obj.insert_content(INSERT_POINTS[1], content_p1)
    with open("README.md", "w", encoding='utf-8') as f:
        f.write(file_obj.get_file_text())
